#!/usr/bin/env ruby

require 'gli'
require 'yaml'
require 'parallels/key_administrator'

class KeyAdministratorCLI
  include GLI::App

  def start arguments
    program_desc "A command-line interface to the Parallels' Key Administration Portal."

    desc 'Connect to the portal at this hostname.'
    flag [:hostname], default_value: 'ka.parallels.com'

    desc 'Connect to the portal using this username.'
    flag [:username]

    desc 'Connect to the portal using this password.'
    flag [:password]

    desc 'Do not verify SSL certificate information.'
    switch [:insecure], negatable: false

    desc 'Run run in demo mode.'
    switch [:demo], negatable: false

    pre do |global_options, command, options, args|
      # Set the operation mode.
      mode = global_options[:demo] ? 'development' : 'production'

      config_file_path = File.join ENV['HOME'], '.parallels/key-administrator.yml'
      loaded_config = YAML.load_file config_file_path if File.exists? config_file_path

      # Load the appropraite hash depending on what mode we're in.
      config = loaded_config[mode].inject({}) do |hash, (key, value)|
        # Symbolize top-level keys.
        hash[key.to_sym] = value;
        hash
      end

      # Merge the configuration options if they were loaded successfully.
      global_options.merge! config if loaded_config

      # If none of these keys were specified, fail now.
      [:hostname, :username, :password].each do |key|
        help_now! "A #{key.to_s} is required!" unless global_options[key]
      end

      # Create an instance of the portal to share with the rest of the application.
      @portal = Parallels::KeyAdministrator::Portal.new global_options[:hostname], global_options

      # Ensure the credentials are valid before continuing.
      authentication = @portal.client.login_valid?
      exit_now! 'Provided credentials are invalid or error while connecting to portal.' unless authentication.successful?

      # Return true to continue processing.
      authentication.successful?
    end

    desc 'Lookup licenses attached to any of the following IP or MAC addresses.'
    command 'lookup' do |cmd|
      cmd.desc 'One or more comma-separated IP addresses to lookup.'
      cmd.flag [:ips], default_value: ''

      cmd.desc 'One or more MAC addresses, separated by commas, to lookup.'
      cmd.flag [:macs], default_value: ''

      cmd.desc 'Only show active license keys.'
      cmd.switch [:active]

      cmd.action do |global_options, options, args|
        criteria = {
          ips:  [],
          macs: []
        }

        options[:ips].split(/,\s*?/).map do |ip|
          criteria[:ips] << ip if ip.match /^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$/
        end

        options[:macs].split(/,\s*?/).map do |mac|
          criteria[:macs] << mac if mac.match /^(\S{1,2}:\S{1,2}:\S{1,2}:\S{1,2}:\S{1,2}:\S{1,2})$/
        end

        response = @portal.key.find_by criteria

        data = response[:key_infos]

        if options[:active]
          data.reject! { |key, value| key['terminated'] == true }
        end

        if not data.empty?
          data.each do |key|
            puts "Key: #{key['keyNumber']} (#{key['keyType']})"
            puts "  Creation Date: #{key['createDate'].to_date.rfc2822}"
            puts "  Last Reported: #{key['lastReportingDate'].to_date.rfc2822}"
            puts "  Reporting IPs: #{key['lastReportingIp']}"
            puts "  Status:        #{(key['terminated'] ? 'Terminated' : 'Active')}"
          end
        else
          puts "No license keys available."
        end
      end
    end

    desc 'Send a license key to a recipient by email.'
    command 'send-by-email' do |cmd|
      cmd.desc 'Send the license key in ZIP archive format.'
      cmd.switch [:compress]

      cmd.action do |global_options, options, args|
        exit_now! 'Please provide both a recipient email address and a key number to send.' if args.empty? or args.length != 2
        recipient = args.shift
        number = args.shift

        action = @portal.key.send_by_email number, recipient, options[:compress]

        if action.successful?
          puts "License key #{number} successfully sent to #{recipient}."
        else
          puts "Could not send license key #{number} to #{recipient}; please check your arguments."
        end
      end
    end


    desc 'Annotate a license key with a message.'
    command 'annotate' do |cmd|
      cmd.desc 'The message to attach to the license key.'
      cmd.flag [:message]

      cmd.desc 'Same as --message but read from standard input.'
      cmd.switch [:stdin]

      cmd.action do |global_options, options, args|
        exit_now! 'Either --message or --stdin must be given.' unless options[:message] or options[:stdin]
        exit_now! 'Please provide a license key to annotate.' if args.empty? or args.length != 1
        key_number = args.shift

        message = options[:stdin] ? STDIN.gets.chomp : options[:message]

        exit_now! 'No license key annotation collected.' unless message

        response = @portal.key.add_note! key_number, message

        if response.successful?
          puts "Added '#{message}' to #{key_number}."
        else
          puts "Failed to add notation to license key."
        end
     end
    end

    desc 'Find all license key metadata information.'
    command 'review' do |cmd|
      cmd.action do |global_options, options, args|
        exit_now! 'Please provide a license key number to review.' if args.empty? or args.length != 1
        number = args.shift

        response = @portal.key.metadata number

        if not response.successful?
          exit_now! 'License key number was invalid or had no data available.'
        end

        puts "Key: #{response['keyNumber']} (#{response[:key_type]}) [#{response[:api_key_type]}]"
        puts "  Product Key:     #{response[:product_key]} [#{response[:billing_type]}]"
        puts "  Expiration Date: #{response[:expirationDate].to_date.rfc2822}"
        puts "  Creation Date:   #{response[:create_date].to_date.rfc2822}"
        puts "  Update Date:     #{response[:update_date].to_date.rfc2822}"
        puts "  Last Report On:  #{response[:last_reporting_date].to_date.rfc2822}"
        puts "  Reporting IPs:   #{response[:last_reporting_ip]}"
        puts "  Status:          #{(response[:terminated] ? 'Terminated' : 'Active')}"
        puts "  Problem:         #{(response[:problem] ? 'Yes' : 'No')}"

        puts "  Features:"
        response[:features].each_with_index do |feature, idx|
          puts "    #{idx + 1}) #{feature['name']} [#{feature['apiName']}]"
        end

        puts "  Additional Keys:"
        response[:additional_keys].each_with_index do |key, idx|
          puts "    #{idx + 1}) #{key['keyType']} [#{key['apiKeyType']}]"
          puts "         License Key: #{key['keyNumber']}"
          puts "         Expiry Date: #{key['expirationDate'].to_date.rfc2822}"
        end
      end
    end

    desc 'Retrieve a license key and display it to standard output.'
    command 'retrieve' do |cmd|
      cmd.desc 'Key should be compatible with the previous minor version.'
      cmd.switch [:compatible]

      cmd.desc 'Store the key to a file instead of displaying it to standard output.'
      cmd.flag [:output]

      cmd.action do |global_options, options, args|
        exit_now! 'Please provide a license key number to retrieve.' if args.empty? or args.length != 1
        response = @portal.key.retrieve args.shift, options[:compatible]

        if not response.successful?
            exit_now! 'Failed to retrieve key!'
        end

        key_number = response[:key_number]
        key_data = response[:key]

        if options[:output]
          # Write the key to the file specified.
          File.open options[:output], File::CREAT | File::TRUNC | File::RDWR, 0644 do |handle|
            handle.write key_data
          end
          # Print a status message to standard output.
          puts "Wrote #{key_number} to #{options[:output]}."
        else
          # Print the key to standard output.
          puts key_data
        end
      end
    end

    desc 'Renew a license key for an additional fixed period, as defined by the key type at purchase time.'
    command 'renew' do |cmd|
      cmd.action do |global_options, options, args|
        exit_now! 'Please provide a license key number to renew.' if args.empty? or args.length != 1
        key_number = args.shift

        response = @portal.key.renew key_number

        if response.successful?
          puts "Successfully renewed key: #{response.message} (#{response.code})"
        else
          puts "License key #{key_number} could not be renewed."
        end
      end
    end

    desc 'Retrieve the usage information for a Plesk license key, including resellers, domains, and clients.'
    command 'usage' do |cmd|
      cmd.action do |global_options, options, args|
        exit_now! 'Please provide a license key number to review.' if args.empty? or args.length != 1
        key_number = args.shift

        response = @portal.key.last_usage_info key_number

        if response.successful?
          puts "No data has been reported for #{key_number} yet."
        else
          puts response
        end
      end
    end

    run arguments
  end
end

cli = KeyAdministratorCLI.new
code = cli.start ARGV
exit code

#EOF
